# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jTlp_b6BkXfBuBodZaIhcvQ5Bg2fwwIJ
"""

#!pip install torchfile

"""# Download Data"""

!rm -rf sample_data

!wget 'https://storage.googleapis.com/kaggle-data-sets/48736/92937/bundle/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20240629%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240629T074629Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=43c1ca05ff26216f7d302f95faa1e7ee2ee49f73f6752ed0790f14c8802a4291b62ac2891b3b3e5479cd23ffa308453db20c82e4db66a1737e8ed7f3b92c2012b73853058992ec4ccacf5d3529a8d7c74114bac65e36bdfff9645576ff090c8c75a3efacd1cf8f4744382c70ce343f861c16f87b4817cf74d2e93daca14d2fc8bb82360f968e74ef65231bf311d46c9bbf280d8ebee9cf28b09ee6f9b3222962cd7fc7f5ee311152b671299d2525d0d2d16eaa92ce4ab798cfcd1ba51f1c4b4165386cd8f883bce6ede6f906d4efa4d8210c78570884b487291e882cdaf09e11ffb63b4a5fc63ef73614d9ddf12e86480360643923cee87be53700fcf1e13faf'

!unzip "/content/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com@kaggle-161607.iam.gserviceaccount.com%2F20240629%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240629T074629Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=hos" -d "coco_train_val2017"

os.remove("/content/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com@kaggle-161607.iam.gserviceaccount.com%2F20240629%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240629T074629Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=hos")

!wget "https://storage.googleapis.com/kaggle-data-sets/258535/542252/bundle/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20240629%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240629T074616Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=4c51fab4bb487442cd750b40bb5f1858dad7cdf68f8e96a7f23dc5bc230f68895b29ef31d8ff4089b68266a268c8b628a599b4df4b7b30e4cf812af94c1281b54592c5f54985bc5289c626b39e83fa3b5587b4aba38242a0d00a4814a12521c97f49c2df9b0021133a9429eccca5eafeec117a23963b5fbc349e4448274289a051569a5a806d7e12d1dec5a25b6a28ae79afb91c53212a98059c17ad0b6872a2a3da6f42b513da6366805af1d52f212b6cdd70711eb99b7fd0e1914a8c7ab242cd90cd5cc7f50c4c207be768e5a212e1b8b6c2930620554527a71e3025c1cd15ea304cef046cd6516c5216e152767b41dd56a2e81930a802b92a3fba2fb3d610"

!unzip "/content/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com@kaggle-161607.iam.gserviceaccount.com%2F20240629%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240629T074616Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=hos"  -d "coco_data"

os.remove("/content/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com@kaggle-161607.iam.gserviceaccount.com%2F20240629%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240629T074616Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=hos")

!wget "https://storage.googleapis.com/kaggle-data-sets/258650/542437/bundle/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20240629%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240629T074703Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=1355510b9310d063f933f3a2b7ff75ac42434c3530352a13377a5b4652b57eeba8a05cae8e7af7df19661415f9f1beaae0a99211b6f157355a44cfa2785c30a7b0b986b30a886dbb1464bc4b438ab8eaf99f6d5f8b7baa0347a99e5542a26dc5049689c94ca75107d1502bc975210c744d05ef49f81cccfbe497a158866745be675be7dab8161b1cdd14670bb3f737292136a04f79046e15b02c7192feb91828e6a0ec1c913f2565db108343d4589ce2d3e7c91b9852f22d71ab791a1aa0eebd7ad904f38d069ba40cbdb9035027ef1ef36a7b282b704418ea26907c565c980824511178fa6565628f15930b9715e1301de5effa17236175b74de243cec1ec57"

!unzip "/content/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com@kaggle-161607.iam.gserviceaccount.com%2F20240629%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240629T074703Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=hos" -d "models"

os.remove("/content/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com@kaggle-161607.iam.gserviceaccount.com%2F20240629%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240629T074703Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=hos")

"""# Import libraries"""

import os
import torch
from dataset import TextDataset
from utils import mkdir_p, weights_init, KL_loss, compute_discriminator_loss, compute_generator_loss, save_img_results, save_model
from model import *
from trainer import GANTrainer
import torch.backends.cudnn as cudnn
import torchvision.transforms as transforms
import argparse
import random
import sys
import pprint
import datetime
import dateutil
import dateutil.tz
import torchfile

"""# Main"""

class Struct:
    def __init__(self, **entries):
        self.__dict__.update(entries)

if __name__ == '__main__':
    # parameters
    parser = argparse.ArgumentParser()
    params = dict()

    params['DATASET_NAME']='coco'
    params['EMBEDDING_TYPE']='cnn-rnn'
    params['GPU_ID']='0'
    params['CUDA']='TRUE'
    params['WORKERS']=4
    params['NET_G']=''
    params['NET_D']=''
    params['DATA_DIR']='/content/coco_data/coco/coco'
    params['IMG_DIR'] = '/content/coco_train_val2017/train2014/train2014'
    params['VIS_COUNT']=64
    params['Z_DIM']=100


    '''for Stage I'''
    #params['CONFIG_NAME']='stageI'
    #params['IMSIZE']=64
    #params['STAGE']=1
    '''    '''

    '''for Stage II'''
    params['CONFIG_NAME']='stageII'
    params['STAGE1_G']= '/content/tmp/Model/netG_epoch_100.pth'
    params['IMSIZE']=256
    params['STAGE']=2
    params['R_NUM']=2
    '''    '''

    params['FLAG']='TRUE'
    params['BATCH_SIZE']=32
    params['MAX_EPOCH']=100
    params['SNAPSHOT_INTERVAL']=1
    params['LR_DECAY_EPOCH']=20
    params['DISCRIMINATOR_LR']=0.0002
    params['GENERATOR_LR']=0.0002
    params['KL']=2.0
    #gan
    params['CONDITION_DIM']=128
    params['DF_DIM']=96
    params['GF_DIM']=192

    #text
    params['DIMENSION']=1024
    args = Struct(**params) #Convert nested Python dict to object


    manualSeed = random.randint(1, 10000)
    random.seed(manualSeed)
    torch.manual_seed(manualSeed)
    torch.cuda.manual_seed_all(manualSeed)
    now = datetime.datetime.now(dateutil.tz.tzlocal())
    timestamp = now.strftime('%Y_%m_%d_%H_%M_%S')
    print(timestamp)

    output_dir = 'tmp/'

    num_gpu = len(args.GPU_ID.split(','))
    if args.FLAG:
        image_transform = transforms.Compose([
            transforms.RandomCrop(args.IMSIZE),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
        dataset = TextDataset(args.DATA_DIR, 'train',
                              imsize=args.IMSIZE,
                              transform=image_transform)
        assert dataset
        dataloader = torch.utils.data.DataLoader(
            dataset, batch_size=args.BATCH_SIZE * num_gpu,
            drop_last=True, shuffle=True, num_workers=int(args.WORKERS))

        algo = GANTrainer(output_dir, args)
        algo.train(dataloader, args.STAGE)

"""# Save weights to drive"""

from google.colab import drive
drive.mount('/content/gdrive')

drive_path = '/content/gdrive/My Drive/' # This is the path to your main Google Drive folder
folder_name = 'StackGAN_weights'
path = os.path.join(drive_path, folder_name)

if not os.path.exists(path):
    os.mkdir(path)
    print("Folder created successfully!")
else:
    print("Folder already exists!")

os.mkdir('/content/gdrive/My Drive/StackGAN_weights/G1')

import shutil
shutil.copy('/content/tmp/Model/netG_epoch_100.pth', '/content/gdrive/My Drive/StackGAN_weights/G1/')

import shutil

shutil.copy('/content/tmp/Model/netG_epoch_100.pth', '/content/gdrive/My Drive/StackGAN_weights/G2/')